# 목표

- JUnit을 이용하여 유닛 테스트를 진행할 수 있따.
- 테스트가 개발을 주도하는 TDD로 서비스를 완성 할 수 있다.
- `try-catch`로 적절한 오류를 핸들링 할 수 있다.
- 레이어드 아키텍처를 통해 구현한다.
- DB 모델링을 수행할 수 있다.
- DDL을 통해서 데이터베이스 개체 생성/변경을 할 수 있다.
- DML을 통해서 데잍터베이스를 조작할 수 있다.
- JDBC Api를 통해서 Java에서 DBMS로 Access할 수 있다.

- 캡슐화를 할 수 있다.
- DAO, VO, Controller를 사용할 수 있다.

# 자바 코드 컨벤션

### 네이밍

- 번수명은 명사로 작성한다.
- 메서드명은 동사로 행위를 표현할 수 있다.

### 단위 분리

- 하나의 메서드는 하나의 행위만 수행한다.

### 예외 처리

예외 사항은 Exception을 활용하여 비즈니스적인 의미를 담도록 한다.
적절한 try ~ catch 절을 사용한다.

# Layered Architecture 사용하기

- Controller
- Service
- Dao

# 기술

- MySQL
- TDD
- Junit
- Gradle
- JDBC API
- 레이어드 아키텍쳐

우선 우리는 MySQL RDBMS를 이용하여 데이터를 저장할 것이다.
그리고 우리는 Java에서 사용할 빌드 자동화 도구로서 Gradle을 이용한다.
MySQL의 데이터를 조작하기 위해서 Java의 JDBC API를 사용할 것이다.
그리고 우리는 우리의 레이어드 아키텍쳐가 잘 동작하고 예상한 기능이 잘 수행하는지 확인하기 위한 유닛 테스트를 JUnit을 사용해 진행할 것이다.
또한 앞으로의 모든 개발은 TDD를 통한다.
테스트가 주도되는 개발을 시작부터 끝까지 경험할 것이다.

## 이번 시리즈를 완주하면 우리는

1. JDBC API를 이용하여 MySQL을 다룰 수있다.
2. JUnit으로 유닛 테스트를 진행할 수 있다.
3. 레이어드 아키텍쳐를 통해 비즈니스 로직을 분리하여 견고한 서비스를 만들 수 있다.
4. Gradle으로 프로젝트에 빌드 자동화를 도입할 수 있다.
5. TDD를 통해 테스트가 주도되는 개발을 수행할 수 있다.
