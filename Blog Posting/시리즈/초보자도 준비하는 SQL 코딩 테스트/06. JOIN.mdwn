# 목차

- JOIN
  - 조인이란?
  - 관계란?
  - 1:N 관계
- LEFT JOIN
- INNER JOIN
- OUTER JOIN

# 조인

JOIN은 SQL 코딩 테스트에서 출제 순위 1순위로 가장 가장 가장 중요하면서 어려운 부분이다.
사실상 지금까지 배웠던 것들이 이번 JOIN을 이용하기 위해서 배웠다고(물론 실제로 데이터베이스를 사용하는 소프트웨어 엔지니어링 입장에서 그 둘의 상관 관계는 크게 없지만) 해도 과언이 아니다.

## 조인이란?

지금까지 우리는 **하나의 테이블** 이를테면 `usertb1`이나 `buytb1`에서만 작업을 수행했었다.
하지만 지금 배울 JOIN은 **여러 개의 테이블**에서 작업을 수행할 수 있게 한다.

#### 즉, 두 개 이상의 테이블을 서로 **묶어서** 하나의 결과 집합으로 만들어내는 것이다.

이러한 조인을 이해하기 위해서 알아야할 것이 있다.

바로 **관계**이다.

## 관계란?

관계는 RDBMS 예를 들어 MySQL이나 MsSQL이나 Oracle과 같이 거의 대부분 사용되는 데이터베이스를 뜻한다.
이를 **관계형 데이터베이스**라고 하는데, 이 관계형 데이터베이스는 데이터베이스의 혁명이라고 불리기도 한다.
관계형 데이터베이스에서 사용되는 데이터들은 **모두 관계**를 맺고 있는데, 가장 대표적으로 다음과 같은 관계가 있다.

- 학급: **담임 교사** 1:1 **학생** (담임 교사 한 명은 하나의 학급만 맡을 수 있다.)
- 담당: **담임 교사** 1:N **학생** (담임 교사 한 명은 여러 명의 학생을 맡을 수 있다.)
- 수업: **교사** N:M **학생** (교사 한 명은 여러 명의 학생을 맡을 수 있고, 학생 한 명은 여러 명의 선생님에게 교육받을 수 있다.)

이 중에서 JOIN은 1:N 관계를 나타낼 수 있는 방법이다.

## 1:N 관계

쿼리문까지 거의 다 왔다.
이론에서 조금만 참아보자.

위에서 말 했던 것 처럼 `담임 교사 한 명은 여러 명의 학생을 맡을 수 있다.`에서

# LEFT OUTER JOIN

- INNER JOIN + LEFT
-

# INNER JOIN

# OUTER JOIN
