# 완전 탐색 종류

- 브루트 포스
- 건너 뛰며 해보기
- 비트 마스크
- 백트래킹
- 재귀함수
- 순열
- BFS
- DFS

# 브루트 포스

- 가능한 모든 경우의 수를 탐색하며 **요구 조건**에 충족되는 결과만을 가져옴.
- 예외 없이 100% 확률로 정답만 출력함
- 모든 문제를 해결할 수 있는 방법은 아님
- 모든 경우의 수를 다 해봐도 시간 제한을 넘지 않을 경우에 브루트 포스를 선택함
- 핵심은 가능한 모든 방법의 범위를 찾는 것
  - 리모컨 문제와 같은 경우도 1 ~ 100만까지 하나씩 다 해봄으로 해결

### 문제 해결 방법

1. 문제의 가능한 경우의 수를 다 계산해본다. (문제를 풀 수 있는 방법을 생각해본다.) : **직접 계산을 통해서 구한다.(손으로 계산해보기)**
2. 가능한 모든 방법을 만들어본다. (그 방법을 어떻게 만들 것인가) : **for문으로 반복하거나 순열, 비트마스크, 재귀등 다 해보자.**
3. 각각의 방법을 이용해 답을 구해본다. (그 방법을 이용해서 실제로 코드를 작성) **위에서 만든 방법을 통해서 최적 알고리즘을 검증**

### 예제 문제

- 백준 [1476번 날짜 계산](https://www.acmicpc.net/problem/1476)
- 백준 [3085번 사탕 게임](https://www.acmicpc.net/problem/3085)
- 백준 [1107번 리모컨](https://www.acmicpc.net/problem/1107)
- 백준 [14500번 테트로미노](https://www.acmicpc.net/problem/14500)

# 건너 뛰며 해보기

- 브루트 포스에서 조금 더 효율화 작업을 거친 알고리즘
- 하지만 모든걸 다 해보는 브루트포스와 다르게 점진적으로 건너뛰면서 실행해보는 기법
- 건너 띄는 부분은, 누가 봐도 이건 중복이다 혹은 필요 없다 싶은 부분을 건너 띄어야 함
- 보통 브루트 포스로 문제를 풀기엔 조금 벅찬 시간 복잡도를 갖는 문제에 적용
- 규칙을 찾아서 해당 규칙을 띄어 넘으며 해결
- 건너 띌 규칙을 찾는게 핵심인 문제
