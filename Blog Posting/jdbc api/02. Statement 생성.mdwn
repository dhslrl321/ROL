MySQL과 JAVA는 서로 다르다.
우리는 **Connector J**의 Connection 객체를 통해서 MySQL과 JAVA를 서로 연결했다.
그리고 이제는 SQL문을 Connection을 통해서 전달해보려고 한다.
그 전달을 위해서 사용하는 것이 바로 Statement이다.

# Statement

Statement는 Connection 객체로부터 얻을 수 있다.

## Statement 생성

```java
Class.forName("com.mysql.cj.jdbc.Driver");
Connection con = DriverManager.getConnection(url, id, pw);
Statement st = con.createStatement();
```

## Statement 실행

앞선 과정까지는 statement를 사용할 수 있도록, 즉 쿼리문을 DB에 보낼 수 있도록 연결 설정과 어떤 객체를 보낼지 지정하였다.
이제 Statement 인터페이스에 있는 실행 메서드를 통해서 쿼리문을 실행시켜보자.

실행을 위한 메서드는 다음과 같은 메서드가 존재한다.

1. `execute()` : 모든 쿼리문에 사용가능하며 true / false 를 반환
2. `executeQuery()` : SELECT 문에 주로 사용되며 query의 결과를 담은 객체인 ResultSet 을 반환
3. `executeUpdate()` : Create / Update / Insert 등과 같은 **갱신문**에 사용되며, 주어진 SQL 문을 실행하고 이에 대한 행의 개수 반환
4. `close()` : Statement 객체와 JDBC 리소스 해제

간단한 CRUD의 경우

## executeQuery()

검색문에 주로 사용되면서 쿼리문의 실행 결과를 ResultSet 객체를 통해서 **반환**한다.

```java
ResultSet result = stmt.executeQuery("SELECT * FROM usertb1");
```

## executeUpdate()

주로 **갱신문**에서 사용되며, 위에서 봤던 `executeQuery()` 처럼 주어진 SQL 문을 실행하고 실행된 행의 수를 반환한다.
반환되는 데이터가 없는 경우에는 0이 반환된다.

```java
// create 문
int result = stmt.executeUpdate("CREATE TABLE usertb1(user_id bigint, name varchar(8), addr varchar(10), registered_at datetime)");

// insert 문
int result = stmt.executeUpdate("INSERT INTO usertb1 VALUES(1, 'Jang', 'Seoul', '2020-12-12')");

// update 문
int result = stmt.executeUpdate("UPDATE usertb1 SET name = 'Kim' WHERE user_id = 1");
```
