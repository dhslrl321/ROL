### sample data

```sql
CREATE TABLE `buytb1` (
  `num` int NOT NULL AUTO_INCREMENT,
  `userId` char(8) NOT NULL,
  `prodname` char(6) NOT NULL,
  `groupname` char(4) DEFAULT NULL,
  `price` int NOT NULL,
  `amount` smallint NOT NULL,
  PRIMARY KEY (`num`),
  KEY `userId` (`userId`),
  CONSTRAINT `buytb1_ibfk_1` FOREIGN KEY (`userId`) REFERENCES `usertb1` (`userId`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci

CREATE TABLE `usertb1` (
  `userId` char(8) NOT NULL,
  `name` varchar(10) NOT NULL,
  `birthYear` int NOT NULL,
  `addr` char(2) NOT NULL,
  `mobile1` char(3) DEFAULT NULL,
  `mobile2` char(8) DEFAULT NULL,
  `height` smallint DEFAULT NULL,
  `mdate` date DEFAULT NULL,
  PRIMARY KEY (`userId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci

insert into buytb1 values(NULL, "KBS", "운동화", null, 44, 1);
insert into buytb1 values(NULL, "KBS", "노트북", "전자", 2230, 1);
insert into buytb1 values(NULL, "JYP", "모니터", "전자", 630, 1);
insert into buytb1 values(NULL, "KBS", "상의", "의류", 80, 2);
insert into buytb1 values(NULL, "BBK", "충전기", "전자", 15, 3);
insert into buytb1 values(NULL, "EJW", "바지", "의류", 32, 2);
insert into buytb1 values(NULL, "SSK", "운동화", null, 50, 10);
insert into buytb1 values(NULL, "KBS", "휴대폰", "전자", 1100, 5);
insert into buytb1 values(NULL, "YJS", "자료구조책", "서적", 430, 1);
insert into buytb1 values(NULL, "JYP", "알고리즘책", "서적", 230, 22);
insert into buytb1 values(NULL, "JYP", "청바지", "의류", 320, 3);
insert into buytb1 values(NULL, "EJW", "아이패드", "전자", 10, 1);
insert into buytb1 values(NULL, "SSK", "책", "서적", 130, 22);
insert into buytb1 values(NULL, "SSK", "운동화", null, 630, 5);
```

# select

- `select .. from .. where` 특정 조건 조회
- `select .. from .. where .. between .. and ..`

## BETWEEN A AND B

특정 A와 B 사이의 값 조회하는데, **연속적인 값**에만 해당이 된다.
예를 들어서 키를 저장하는 height column이 있다면 다음과 같이 설정할 수 있다.

```sql
select name from usertb1 where height between 180 and 183;
```

그럼 180에서 183은 연속적인 값이므로 **between** 속성이 사용가능하다.

하지만 지역을 저장하는 addr이라는 칼럼이 있다면 **between** 속성 대신 **or** 속성을 사용해야한다.

```sql
select name from usertb1 where addr = '경남' or addr = '전남' or addr = '경북';
```

## IN()

위에서 봤듯 연속적이지 않는 값들을 사용할 때는 조금 불편할 수 있다.
이런 점을 보완하기 위해서 탄생한 것이 바로 **이산적인 값을 위한 IN()**이다.

```sql
select name from usertb1 where addr = '경남' or addr = '전남' or addr = '경북';
```

을 in()을 사용해서 더 깔끔하게 할 수 있다.

```sql
select name from usertb where addr in('경남', '전남', '경북');
```

## LIKE
