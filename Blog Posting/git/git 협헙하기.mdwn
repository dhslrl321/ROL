- 메인 저장소 : 오픈소스 프로젝트의 github상 main repo로 내가 기여하고싶은 프로젝트의 저장소. 나한텐 쓰기권한 없음. 그래서 이를 upstream이라고 부름
- 나의 저장소 : github에서 내 계정에 있는 repo로 메인 저장소로 부터 fork한 저장소 origin이라고 부름
- 로컬 저장소 : 내가 컴퓨터에 생성한 git repository file
- 작업 공간 : 실제 소스코드가 있는 workspace

# 순서

1. 오픈소스 프로젝트 가져오기
2. 로컬 저장소 세팅
3. 메인 저장소와 내 저장소 싱크하기

## 오픈소스 프로젝트 가져오기

오픈소스 프로젝트가 있는 메인 저장소를 내 저장소로 fork 해야한다.

## 로컬 저장소 세팅하기

로컬 저장소를 세팅하기 위해서는 다음과 같은 과정을 거쳐야 한다.

- 작업 공간 만들기
- origin 설정
- upstream 설정

#### 작업 공간 만들기

작업 공간을 만들기 위해 `git clone`을 해도 무방하지만 이번엔 직접 폴더를 깃 폴더로 초기화는 방법으로 알아볼 것이다.

```
// 내 작업 공간 폴더 만들기
$ mkdir my-workspace

// 해당 디렉토리로 이동
$ cd my-workspace

// 깃 레포지토리로 초기화
$ git init
```

#### origin 설정

내가 fork한 나의 저장소와 연결시켜 Pull Request를 보낼 준비를 한다.

```
$ git remote add origin fork한-내-원격-저장소-url.git
```

#### upstream 설정

메인 저장소의 코드를 싱크하기 위해 upstream 설정을 한다.

```
$ git remote add upstream 메인-저장소-url.git
```

## 메인 저장소와 내 저장소 싱크하기

오픈소스 프로젝트는 말 그대로 **누구에게나 오픈된** 소스를 유지보수 혹은 서비스한다.

오픈소스의 특성상 나 혼자만 contribution을 하는것이 아니기 때문에 **메인 저장소**와 sync해야 한다.

누군가가 수정한 코드가 내가 작업하고 있는 원격 repo와 함께 가야한다.

그 과정을 바로 **fetch** 과정이라고 하는데, 알아보자.

```
$ git fetch upstream
```

이 명령어를 치면 원본 소스코드의 내용을 **로컬에 내려받는다**

그리고 내려받은 소스 코드를 실제 내 **repository**에 merge 시킨다.

```
$ git merge upstream/master
```

그리고 내 원격 저장소로 push 해준다.

```
$ git push origin master
```
