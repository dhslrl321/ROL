# 들어가는 글

평범한 소프트웨어 스킬을 가진 누구라도 2가지 원칙만 따른다면 프로젝트의 가치를 상승시킬 수 다.

1. 어떤 코드를 작성하기 전에는 **실패하는 테스트 코드를 작성**해라.
2. 중복을 제거해라.

# 1부

완전히 테스트에 의해서 주도되는 Application을 개발해본다.

## 순서

1. 테스트 하나 추가
2. 모든 테스트를 실행해서 추가한 테스트가 **실패**하는지 확인
3. 코드를 조금 수정
4. 모든 테스트를 실행시켜서 추가한 테스트가 **성공**하는지 확인
5. 리팩토링
6. 필요하면 새로 할 일을 todo 리스트에 추가

# TDD의 최종 목표

Clean Code That Works
작동하는 깔끔한 코드가 되는 것이 TDD의 궁극적 목표

# TDD 순서

1. 우리가 무엇을 개발해야할지에 따라 테스트 순서를 정하고 이를 **목록으로 만들자**
2. 우리의 메서드가 어떻게 사용되고 외부에 보여질지 먼저 작성하자. **Red 사이클**
3. 스텁 구현을 통해서 테스트가 컴파일 되도록 한다 **Green 사이클**
4. 상수와 같은 값들을 집어넣어 테스트가 통과되도록 한다. **Green 사이클**
5. 상수를 변수로 바꾸는 등 중복을 최소화 하는 방향으로 점진적으로 변경한다. **Refactor 사이클**
6. 새로운 할일을 목록에 추가하고 넘어가자

##### 스텁 구현: 메서드 이름과 반환부만 적어서 컴파일되게 하는 **껍데기 뿐인 구현**

1. 빨강 : 실패하는 작은 테스트
2. 초록 : 테스트가 통과하는 단계, 이를 위해서 아주 비효율적이고 쓰래기같은 코드를 만들어도 된다.
3. 리팩토링 : 초록 단계에서 테스트가 통과하게 하기위해 생산해냈던 쓰래기들을 줍고 중복들을 제거하는 등 이쁜 코드를 작성

# TDD 일반화

1. 작은 테스트를 추가한다.
2. 모든 ㅔㅌ스트를 실행해서 테스트가 실패하는 것을 확인한다.
3. 조금 수정한다.
4. 모든 테스트를 실행해서 테스트가 성공하는 것을 확인한다.
5. 중복을 제거하기 위해서 리팩토링을 수행한다.

# TDD 시작

최초 테스트를 작성하려면 **완벽한 오퍼레이션의 인터페이스**를 먼저 작성해라.
오퍼레이션은 메서드와 비슷한 말로 객체가 수행할 수 있는 연산을 의미한다.

예를 들어서 예약 대기열에 등록하는 **오퍼레이션(메서드)**가 있다고 했을 때, 먼저 예약 메서드에서 어떤 일을 수행할지 작성하는 것이다.
오류가 나도 괜찮다.

```java
public void getInformation() {
  Person person = new Person("Jang", 24, "Seoul");
  Queue<Person> reservationQueue = new LinkedList<>();
  reservationQueue.add(person);
}
```

# TDD를 배우는 이유

우리는 TDD를 통해서 RED-Green-Refactor 의 3가지 단계를 알게 되었다.
각 단계에서 아주 사소한 작업들이 일어나고 어떻게 보면 귀찮을 수 있지만 우린 이런 사소한 작업을 할 수 있는 능력을 얻게 되었다.

개발을 하다가 뭔가 꼬이기 시작하면 TDD로 천천히 풀어나갈 수 있는 능력이 생기게 되었다.
