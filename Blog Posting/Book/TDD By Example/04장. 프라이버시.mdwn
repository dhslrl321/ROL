# 프라이버시

지난 코드에서는
equals 라는 메서드를 통해서 **동치성**을 통해서 times() 연산을 한 결과 객체와 Dollar 객체가 서로 논리적으로 같음을 증명했었다.

지금까지의 코드를 점검해보자.

```java

public class Test {
  public void testMultiplication() {
    Dollar five = Dollar(5);
    Dollar product = five.times(2);
    assertEquals(10, product.amount);
    product = five.times(3);
    assertEquals(15, product.amount);
  }
}

class Dollar {
  int amount;
  Dollar(int amount) {
    this.amount = amount;
  };
  Dollar times(int multiplier){
    return new Dollar(amount * multiplier);
  }

  public boolean equals(Object object) {
    return amount == (Dollar) object;
  }

  @Test
  public void testEquality() {
    assertTrue(new Dollar(5).equals(new Dollar(5)));
    assertFalse(new Dollar(5).equals(new Dollar(10)));
  }
}
```

하지만 우리의 `testMultiplication()` 메서드는 동치성을 테스트하고 있지 않다.

우리가 테스트해야할 것은 **times()** 메서드는 새로운 Dollar 객체를 반환하는가?를 확인해야 한다.

그래서 testMultiplication() 메서드에서 테스트 하는 내용을 바꿀 것이다.

```java
public void testMultiplication() {
  Dollar five = Dollar(5);
  assertEquals(new Dollar(10), five.times(2));
  assertEquals(new Dollar(15), five.times(3));
}
```

이렇게 된다면 현재 testMultiplication() 메서드는 우리가 원하는 테스트를 수행할 수 있게 된다.

## private

이제 코드를 보면 Dollar 클래스의 amount를 사용하는 곳은 클래스 내부밖에 없으니 변수를 private으로 설정하자.

```java
class Dollar {
  private int amount;

  Dollar(int amount) {
    this.amount = amount;
  };
  // ... 생략
}
```
