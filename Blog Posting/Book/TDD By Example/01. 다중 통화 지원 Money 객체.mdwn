# TDD 시작

## Red 사이틀

```java
public void testMultiplication() {
    Dollar five = Dollar(5);
    five.times(2);
    assertEquals(10, five.amount);
}
```

를 만들자.

그럼 오류가 난다.
컴파일 조차 안된다.
우리는 Green 사이클로 가기 위해서 우선 컴파일이 되게 해야한다.

그러기 위해서 필요한 4가지 조건

1. Dollar 클래스 생성
2. Dollar 클래스에 생성자 추가
3. times 메서드 생성
4. amount 필드 생성

```java
public class Test {
  public void testMultiplication() {
    Test five = Dollar(5);
    five.times(2);
    assertEquals(10, five.amount);
  }
}

class Dollar {
  int amount;
  Dollar(int amount) { }
  void times(int multiplier){}
}
```

이렇게 하면 우선 급한 불은 껐다.

하지만 Junit의 AssertEquals가 기대하는 값은 10인데, 우리는 `int amount`에 대해서 아무 값도 넣어주지 않았으므로 실패한다.

여기서도 성공하기 위한 **쓰래기를 집어 넣으면**

```java
class Dollar {
    int amount = 10;
    Dollar(int amount) {};
    void times(int multiplier){}
}
```

## Green 사이클

다음과 같은 코드는 결국 동작하는 코드가 된다.

이제 Red 사이클을 벗어난 것

## 중복 제거

중복이라 함은 실제로 코드가 중복되는 경우도 존재하지만, 논리적인 중복도 존재한다.

여기서는 10이다.

새롭게 계속 클래스 변수를 추가해도 쟤는 10이라는 수가 중복될 것이다.

중복을 제거하기 위해서 amount가 어떻게 10이라는 수가 되었는지 생각해보자.

- amount \* times;

```java
class Dollar {
  int amount;
  Dollar(int amount) {
    this.amount = amount;
  };
  void times(int multiplier){
    amount *= multiplier
  }
}
```
