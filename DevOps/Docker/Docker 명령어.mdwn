# 도커 명령어 모음

`docker ` ==>
`docker -v` ==> 도커 버전 확인

**run**
`docker run` ==> 도커 실행
`docker run -i -t` ==> 도커를 입출력 모드와 tty 서버로 실행
`docker run -i -t --[name]` ==> name에 해당하는 이름으로 실행
`docker run -d` ==> 도커를 백그라운드로 실행
`docker run -p` ==> 호스트의 특정 포트와 도커의 포트를 포트포워딩
`docker run -e` ==> 도커 환경 변수 값 등록
`docker run --link [alias:targetName]` ==> 도커와 다른 도커를 연결하는데 alias라는 이름으로 타겟 네임을 연결 _Deprecated_
`docker run ... -v [host-share-directory:container-share-directory]` ==> 영속성을 위한 도커 볼륨으로 도커가 호스트의 디렉토리를 공유함.
`docker run ... -v [host-dir/fileName:container-dir/fileName]` ==> 영속성을 위한 도커 볼륨으로 도커가 호스트의 단일 파일을 공유함.
`docker run ... --volumns-from [containerName]` ==> `-v` 옵션으로 호스트와 볼륨을 공유한 컨테이너와 연결

**image**
`docker images` ==> 도커 엔진에 존재하는 이미지 출력

**create**
`docker create` ==> 도커 생성

**start**
`docker start` ==> 도커 실행

**pull**
`docker pull` ==> 이미지가 없을 때 다운

**ps**
`docker ps` ==> 도커 프로세스 리스트 확인
`docker ps -a` ==> 도커

**rename**
`docker rename` ==> 도커 이미지 이름 변경

**rm**
`docker rm` ==> 도커 삭제
`docker rm -f` ==> 실행중인 컨테이너 삭제

**stop**
`docker stop` ==> 도커 중단.

**inspect**
`docker inspect` ==> 도커 볼륨이 어디에 저장되어있는지 확인
`docker inspect --type [name]` ==> name이름의 볼륨을 검색

## 볼륨

**create**
`docker volume create` ==> 도커 볼륨을 생성
`docker volume create --name[name]` ==> 도커 볼륨을 name이라는 이름으로 생성

**run**
`docker volumn run -v [volumeName:containerDir]` ==> 호스트와 볼륨을 공유할 때

**ls**
`docker volume ls` ==>
**inspect**
`docker volume inspect` ==> 도커 볼륨이 어디에 저장되어있는지 확인

`docker ` ==>
`docker ` ==>
`docker ` ==>
