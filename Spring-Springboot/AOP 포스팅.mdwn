# AOP

Core Concerns 핵심 기능 : 업무 로직을 포함하는 기능
Cross Cutting concern 부가 기능 : 핵심 기능을 도와주는 부가적 기능(로깅, 보안)

AOP는 애플리케이션에서의 관심사의 분리(기능 분리) 즉, 핵심적인 기능에서 부가적인 기능을 분리하는 것을 말 한다.
분리한 부가기능을 Aspect라는 모듈 형태로 만들어서 설계하고 개발하는 방법

- OOP를 적용해도 핵심 기능에서 부가 기능을 쉽게 분리된 모듈로 작성하기 어려운 문제점을 AOP가 해결
- 부가기능을 Aspect로 정의하여, 핵심기능에서 부가기능을 분리함으로 핵심기능을 설계하고 구현할 때 객체지향적 가치를 지킬 수 있도록 도와주는 개념

## Aspect

부가기능을 정의한 코드인 **Advice**와 어디를 적용할지를 결정하는 **PointCut**을 합친 개념

**Aspect = Advice + PointCut**

- AOP 개념을 적용하면 핵심기능 코드 사이에 침투된 부가기능을 독립적인 Aspect로 구분할 수 있다.
- 구분된 부가기능 Aspect를 런타임 시에 필요한 위치에 동적으로 참여하게 할 수 있음

## AOP 용어

#### Target

핵심기능을 담고 있는 모듈로, 부가기능을 부여할 대상이 된다.

#### Advice

타겟에 제공할 부가기능을 담고 있는 모듈

#### Join Point

Advice가 적용될 수 있는 위치
타겍 객체가 구현한 인터페이스의 모든 메서드는 Join Point가 될 수 있음

#### PointCut

어드바이스를 적용할 타겟의 메서드를 선별하는 정규표현식
표현식은 `execution`으로 시작하고, 메서드의 Signature를 비교하는 방식

#### Aspect

AOP의 기본 모듈
실글톤 형태의 객체로 존재

#### Advisor

어드바이스 + 포인트컷
Spring AOP에서만 사용하는 특별한 용어

#### Weaving

포인트 컷에 의해서 결정된 타겟의 조인 포인트에 부가기능(어드바이스)를 삽입하는 과정
AOP가 핵심기능(타겟)에 영향을 주지 않으면서 필요한 어드바이스를 추가할 수 있도록 하는 핵심적인 처리 과정
