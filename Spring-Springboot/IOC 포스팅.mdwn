# Spring을 한 줄로 정의하자면

**IoC와 AOP를 지원하는 경량 컨테이너 프레임워크**

- POJO
- IOC
- Bean : 스프링이 제어권을 가지고 직접 만들고 관계를 부여하는 오브젝트(제어의 역전이 적용된 오브젝트)
- DI :
- IoC 오브젝트 : 빈 팩토리라고 불리고 보통은 확장된 애플리케이션 컨텍스트를 주로 사용함.
- Application Context : IoC 방식을 따라 만든 더 확장된 빈 팩토리, 모든 구성요소의 제어 작업을 담당하는 IoC 엔진이라는 의미가 더 가까움
- Bean Factory : 빈을 생성하고 관계를 설정하는 IoC의 기본 기능에 초점을 맞춘 것.

- POJO -> Bean 등록
- setter, constructor Injection

# Inversion Of Control

**프로그래머가 작성한 프로그램이 재사용 라이브러리의 흐름 제어를 받게 되는 소프트웨어 디자인 패턴**

제어의 역전으로 인스턴스 생성부터 소멸까지 생명주기 관리를 컨테이너가 대신 해준다는 뜻.
개발자가 컨테이너 역할을 해주는 프레임워크에게 제어의 권한을 넘겨 개발자의 코드가 신경 써야 할 부분을 줄이자는 전략.

Spring Container가 IoC를 지원하고 메타데이터 설정(XML)을 통해서 Beans를 관리.
DI를 통해서 IoC관리

컴포넌트 의존관계 결정 및 설정, 생명주기를 해결하기 위한 패턴

POJO의 생성, 초기화, 서비스, 소멸에 대한 권한을 갖는다.

## IoC의 종류

IOC 에는 DL, DI가 있다.

- DL (Dependency Lookup)
- DI (Dependency Injection)

DL: Dependency Lookup : (EJB, Spring) : 특정 프레임워크에 종속되는 API를 사용하기 떄문에 잘 사용하지 않음
DI: Dependency Injection : (Spring, PicoContainer)
DI에는 Setter Injection, Constructor Injection, Method Injection으로 분류된다.

#### DL

**의존성 검색**으로 저장소에 저장된 Bean에 접근하기 위해 컨테이너가 제공하는 API를 이용해서 Bean을 Lookup
대표적으로 (EJB, Spring)프레임워크가 사용되는데 위에서 말한 컨테이너 API를 사용하기 때문에 컨테이너 종속성이 증가해서 DI를 더 많이 사용함. 결국 종속성으로 인해 스펙이 너무 복잡함.

#### DI

**의존성 주입** 각 클래스간의 의존 관계를 빈 설정 정보(Bean Definition Configuration)를 토대로 컨테이너가 자동으로 연결해줌

## DI

각 클래스간의 의존 관계를 빈 설정(XML이나 Annotation) 정보(Bean Definition Configuration)를 토대로 컨테이너가 자동으로 연결해줌

- 빈 설정 파일에 의존 관계가 필요하다는 정보를 추가하면 된다.
- 객체 레퍼런스를 컨테이너로부터 주입 받아서, 런타임 시점에 동적으로 의존 관계가 생성됨
- 컨테이너가 흐름의 주체가 되어 어플리케이션 코드에 의존 관계를 주입

#### 장점

- 코드가 단순해진다.
- 컴포넌트간의 결합도가 제거된다.

```
MyClass my = new MyClass();

@Autowired
MyClass my;
```

## DI 유형

DI 유형에는 세 가지가 있다.

- Setter Injection
- Constructor Injection
- Method Injection

### Setter Injection

의존성을 입력 받는 Setter 메서드를 만들고 이를 통해 의존성을 주입
한 번에 하나의 의존 관계를 주입할 수 있다.

Setter 메서드를 통해서 의존관계가 있는 Bean을 주입하는 개념으로 `<property>` 태그를 사용한다.

- `ref` Bean이름을 이용해서 주입할 Bean을 찾는다.
- `value` 레퍼런스 타입이 아닌 단순 값 또는 Bean이 아닌 객체를 주입할 때 사용한다.

### Constructor Injection

필요한 의존성을 포함하는 클래스의 생성자를 만들고 이를 통해 의존성 주입.
`setterInjection`과는 다르게한 번에 여러 개의 의존 관계를 주입할 수 있다.

생성자를 통해 의존 관계가 있는 Bean을 주입하는 개념으로 `<constructor-arg>` 태그를 사용한다.
생성자 주입을 위헌 설정으로 index를 지정하거나 name을 지정하는 2가지 방법이 있다.

**index 설정**

```
<bean id="hello" class="packagename.di.hello">
    <constructor-arg index="0" value="Spring"/>
    <constructor-arg index="1" ref="printer"/>
</bean>
```

**name 설정**

```
<bean id="hello" class="packagename.di.hello">
    <constructor-arg name="name" value="Spring"/>
    <constructor-arg name="printer" ref="printer"/>
</bean>
```

### Method Injection

의존성을 입력 받는 일반 메서드를 만들고 이를 통해 의존성을 주입

## DI 컨테이너의 개념

### Bean

Spring DI 컨테이너가 관리하는 객체를 빈(bean)이라고 하고, 이 빈들을 관리한다는 의미로 컨테이너를 빈 팩토리(BeanFactory)라고 부른다.

객체의 생성과 객체 사이의 런타임 관계를 DI 관점에서 볼 떄는 컨테이너를 BeanFactory라고 한다.
BeanFactory에서 여러 컨테이너 기능을 추가한 것을 ApplicationContext라고 부른다.

## BeanFactory vs ApplicationContext

BeanFactory, ApplicationContext는 Spring 의 DI 컨테이너이다.

### BeanFactory

- Bean을 등록, 생성, 조회, 반환 관리
- 보통 BeanFactory를 바로 사용하지 않고, 이를 확장한 ApplicationContext를 사용함.
- getBean() 메서드가 정의되어 있음

BeanFactory를 바로 사용하지는 않고 보통 ApplicationContext를 사용한다.

### ApplicationContext

`BeanFactory` 인터페이스를 상속받는 `ApplicationContext`는 AOP, 메세지 처리, 이벤트 처리와 같은 기능을 제공한다.

- Bean을 등록, 생성, 조회, 반환 관리 기능은 BeanFactory와 같음
- Spring의 각종 부가 서비스를 추가로 제공
- Spring이 제공하는 `ApplicationContext` 구현 클래스가 여러 가지 종류가 있음

---

1. Method Extraction

- 기본적인 관심사 추출 단계
- 중복된 메서드 추출
- 변화에 반응하기 어려움

2. Template Method Pattern

- 스프링이 사랑하는 방법
- 슈퍼클래스에서 기본적인 로직의 흐름이나 중요한 코드를 민들고 기능의 일부를 추상 메소드나 오버라이딩 가능한 protected 메소드로 만드는 디자인 패턴
- 상속을 통한 방법이기 때문에 상속에 대한 단점을 그대로 안고 가야 한다.

3. 클래스로 독립

- 상속의 문제를 해결하기 위해 새로운 클래스로 독립시켜 객체화 시켜 사용한다.
- 단지 상속의 문제는 해결했을지 몰라도 변화에 반응하기 어려운 점은 메서드 추출과 같다.

4. 인터페이스 도입

- 인터페이스는 자바가 추상화를 제공하는 가장 유용한 도구이다.
- 인터페이스는 어떤 일을 하겠다 라는 기능만 정의해놓았지 내부는 없다.
-
