# 가게 목록 API 생성
##### GET/restaurants

```
[
    {
        "id":2001,
        "name":"oddyasy",
        "address":"space"
    },
    {
        "id":2002,
        "name":"Yeous",
        "address":"kyoungju"
    }
]
```
**의 데이터를 Back에서 전달하고 Front에서 받는 예제**

## Interfaces/RestaruntController
```
package com.example.jpatest.interfaces;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.hamcrest.core.StringContains.containsString;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class) // SpringRunner.class로 실행
@WebMvcTest(RestaurantController.class) // RestaurantController 클래스를 MvcTest 클래스로 설정
class RestaurantControllerTests {

    @Autowired
    private MockMvc mvc; // 자동 의존성 주입으로 MockMvc객체 생성

    @Test
    public void list(){

        try {
            mvc.perform(get("/restaurants")) // get 메서드로 해당 url로 아래와 같은 테스트 보냄
                    .andExpect(status().isOk()) // 결과 상태가 200ok인지
                    .andExpect(content().string( 
                            containsString("\"name\":\"Bob zip\""))) // 결과로 JSON형식으로 return 하는지
                    .andExpect(content().string( 
                            containsString("\"id\":1004")));

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

}
```

## Controller 테스트
Controller를 테스트 하기 위해서 두 가지 어노테이션을 추가시켜줘야한다.

#### 1 `@RunWith(SpringRunner.class)`
junit에서 기본 테스트용 runner가 있는데 runwith로 지정해준다면 기본 runner대신 runwith로 지정한 클래스로 실행하고 테스트를 할 수 있게 된다.
#### 2 `@WebMvcTest(RestaurantController.class)`
컨트롤러를 테스트할 수 있게 해주는 것이다.
@WebMvcTest 어노테이션을 사용시 다음 내용만 스캔 하도록 제한한다. (보다 가벼운 테스팅이 가능하다.)
@Controller, @ControllerAdvice, @JsonComponent, Converter, GenericConverter, Filter, HandlerInterceptor


**참고할 점은 JUnit5를 사용한다면 `@Test` 어노테이션에 Runwith가 포함되어있다는 점이다**.

#### RestaurantController
```
package com.example.jpatest.interfaces;

import com.example.jpatest.domain.Restaurant;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;

@RestController
public class RestaurantController {
    @GetMapping("/restaurants")
    public List<Restaurant> list(){
        List<Restaurant> restaurants = new ArrayList<>();
        Restaurant restaurant = new Restaurant(1004L, "Bob zip", "Seoul");
        restaurants.add(restaurant);
        return restaurants;
    }
}

```

#### Restaurant
```
package com.example.jpatest.domain;

public class Restaurant {
    Long id;
    String information;
    String name;
    public Restaurant(Long id, String name, String information) {
        this.id = id;
        this.name = name;
        this.information = information;
    }

    public String getName() {
        return name;
    }

    public String getInformation() {
        return name +" in " + information;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }
}

```
## 총평

이번에는 controller를 테스트 하는 과정을 배우게 되었다.
controller는 `MockMvc`와 `@WebMvcTest` 어노테이션의 조합으로 생성한다. 또한 순서가

1. controller 테스트 클래스생성
2. controller test class 에서 mvc로 http method 지정
3. controller 에서 ReqeustMapping annotation 생성
4. controller test class 에서 andExpect(status().isOk)로 정상 작동하는지 테스트
5. 나머지 작성