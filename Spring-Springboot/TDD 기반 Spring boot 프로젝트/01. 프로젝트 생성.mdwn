# Spring Initializer
spring 에서 제공하는 쉬운 프로젝트 생성 도구

## 사용 도구

- web starter
- devtools
- lombok

# TDD (Test Driven Development)
== 목표 주도 개발
== 사용자 중심 개발
== 인터페이스 중심 개발
== **올바르게 작동하는 깔끔한 코드**
== test first

#### 순서

1. 올바르게 작동하는 코드 작성 by test code
2. Refactoring

## TDD Cycle

#### 1 Red (실패하는 테스트)
아무것도 안 하고 실패하게끔 하는 코드 작성
ex) 1 + 1 = ? (non-pass)
#### 2 Green (성공하는 코드)
메서드를 만들어서 성공을 하게 하는 코드
ex) 1 + 2 = 1 (pass, incorrect)

#### 3 Refactoring
Green에서 결과를 잘 동작하게 함
ex) 1 + 2 = 3 (pass, correct)

# Demo

`@Test` : 해당 단위(메서드, 클래스)를 테스트를 할 수 있게 해주는 **JUnit** 어노테이션
`assertThat()` : xx는 xx이어야 한다는 **반정문**. Junit5 에서 사용하려면 `import static org.hamcrest.MatcherAssert.*;` hamcrest 라이브러리를 import해야 한다.
`is()` : `assertThat()`메서드의 매개변수로 쓰이며 `import static org.hamcrest.core.Is.is;` 라이브러리로 사용한다.


```
import org.junit.jupiter.api.Test;
import static org.hamcrest.core.Is.is;
import static org.junit.jupiter.api.Assertions.*;
import static org.hamcrest.MatcherAssert.*;

class RestaurantTests {

    @Test
    public void creation(){
        Restaurant restaurant = new Restaurant("Bob zip", "Seoul");
        assertThat(restaurant.getName(), is("Bob zip"));
    }

    @Test
    public void information(){
        Restaurant restaurant = new Restaurant("Bob zip", "Seoul");
        assertThat(restaurant.getInformation(), is("Bob zip in Seoul"));
    }

}
```