# 레이어의 분리

우리가 사용하는 것은 다음과 같은 것들이 있다.

- UI Layer(Interfaces)
> Controller
- Domain Layer
> Restaurant
> Repository

## Application Layer
Restaurant Service 라는 객체가 생성되고 복잡한 로직을 모아서 처리

##### 일단 메뉴 아이템을 추가시켜보자
그러기 위해서는 다음과 같은 과정이 필요하다.

- MenuItem class
```
package com.example.jpatest.domain;

public class MenuItem {
    private String name;

    public MenuItem(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

```
- Restaurant class

```
package com.example.jpatest.domain;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class Restaurant {
    Long id;
    String information;
    String name;
    private List<MenuItem> menuItems = new ArrayList<>();

    public Restaurant(Long id, String name, String information) {
        this.id = id;
        this.name = name;
        this.information = information;
    }

    public List<MenuItem> getMenuItems(){
        return menuItems;
    }

    public String getName() {
        return name;
    }

    public String getInformation() {
        return name +" in " + information;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void addMenuItem(MenuItem menuItem){
        menuItems.add(menuItem);
    }

    public void setMenuItems(List<MenuItem> menuItems) {
        for (MenuItem menuItem : menuItems) addMenuItem(menuItem);
    }
}

```
- MenuItemRepository interface
```
package com.example.jpatest.domain;

import java.util.List;

public interface MenuItemRepository {
    List<MenuItem> findAllByRestaurantId(Long restaurantId);
}
```
- MenuItemRepositoryImpl class
```
package com.example.jpatest.domain;

import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@Component
public class MenuItemRepositoryImpl implements MenuItemRepository {
    List<MenuItem> menuItems = new ArrayList<>();

    MenuItemRepositoryImpl(){
        menuItems.add(new MenuItem("Kimchi"));
    }
    @Override
    public List<MenuItem> findAllByRestaurantId(Long restaurantId) {


        return menuItems;
    }
}
```
- RestaurantController에서 MenuItem 가져오기.
```
package com.example.jpatest.interfaces;

import com.example.jpatest.domain.MenuItem;
import com.example.jpatest.domain.MenuItemRepository;
import com.example.jpatest.domain.Restaurant;
import com.example.jpatest.domain.RestaurantRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class RestaurantController {

    @Autowired
    private RestaurantRepository restaurantRepository;

    @Autowired
    private MenuItemRepository menuItemRepository;

    @GetMapping("/restaurants")
    public List<Restaurant> list(){
        return restaurantRepository.findAll();
    }

    @GetMapping("restaurants/{id}")
    public Restaurant detail(@PathVariable("id") Long id){
        Restaurant restaurant = restaurantRepository.findById(id);
        List<MenuItem> menuItems = menuItemRepository.findAllByRestaurantId(id);
        restaurant.setMenuItems(menuItems);
        return restaurant;
    }
}

```