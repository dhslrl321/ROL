그래프는 방향이 있는 그래프와 방향이 없는 그래프가 있음

# 그래프 구현

- 인접 행렬
- 인접 리스트
- 간선 리스트 : 정렬하는 과정이 있음. (인접 리스트를 써야되는데 라이브러리 사용 금지일 때 씀)

3가지 방법이 있음

문제는 보통 하나에 정점과 연결된 모든 정점을 찾는 것이 문제로 주로 나옴

## 인접 행렬

인접 행렬은 거의 안 씀

- 정점의 개수를 v라고 할 때
- v x v 크기의 이차원 배열 이용
-

정점이 v개 있고 간선이 e 개 있다면
정점 v에 연결

## 간선 리스트

간선을 E라는 배열에 저장.

# DFS BFS

목적 : 임의의 정점에서 시작해서 연결된 모든 정점을 1번씩 방문 하는 것

> 정점을 2번 방문하면 DFS BFS라고 하면 안된.

- DFS : 깊이 우선 (한 번에 갈 수 있는 최대한 까지 가는 것) Stack 로 구현
- BFS : 너비 우선 (한 번에 갈 수 있는 모든 곳 한 번에 방문 복제하듯) Queue 로 구현

# DFS

(재귀함수)

- 스택을 이용해서 갈 수 있는 만큼 최대한 많이 간다.
- 갈 수 없으면 이전 정점으로 돌아간다.

### 스택을 이용해서 갈 수 있는 만큼 최대한 많이 간다.

어떤 정점을 방문했는지 확인하기 위한 `check[]` `check[] = 1` 은 방문 `check[] = 0` 안 방문
방문하면 스택에 추가

### 갈 수 없으면 이전 정점으로 돌아간다.

스택에서 하나씩 빼고 갈 수 있는 정점을 확인한다.
결국 스택이 비어있다면 **탐색을 종료한다.**

# BFS

(큐)
가장 중요

### 방문할 수 있는 것을 다 큐에 넣어준다.

큐에 넣으면 방문했다 라고 처리 한다.

### 큐가 비어있으면 탐색을 종료한다.
