##### 해당 포스팅은 [Spring의 공식 문서](https://spring.io/projects/spring-framework)를 번역한 포스팅입니다. 공식 문서를 학습하실 때 참고하는 용도로 제작되었습니다. 모든 글의 출처는 Spring이며 공식 문서와 다른 의미로해석 되어 있는 부분이 있을 수 있으니 양해바랍니다.

---

# IOC Container

## IOC 컨테이너와 Bean에 대한 소개

이번에는 제어의 역전에 대한 Spring 프레임워크 원리를 설명하겠다.
IOC는 DI(Dependency Injection)으로도 잘 알려져 있다. 객체가 생성자, 팩토리 메서드에 대한 인수 또는 팩토리 메서드에서 생성되거나 반환 된 후 개체 인스턴스에 설정된 속성을 통해서만 개체가 종속성 (즉, 작업하는 다른 개체)을 정의하는 프로세스이다.
컨테이너는 Bean을 생성할 때 의존성들을 주입한다. 이 프로세스는 기본적으로 클래스 또는 Service Locator 패턴과 같은 메커니즘을 사용하여 종속성의 인스턴스화 또는 위치를 제어하는 Bean 자체의 역 (이름, Inversion of Control)이다.
`org.springframework.beans`와 `org.springframework.context` 패키지는 스프링의 IOC 컨테이너에 기반한다. `BeanFactory` 인터페이스는 어떠한 타입이더라도 제어를 할 수 있는 더 확장된 설정 메커니즘을 제공한다. `ApplicationContext`는 `BeanFactory`의 하위 인터페이스이다. 그리고 다음을 포함한다.
**line**

- Spring의 AOP적 특성의 쉬운 통합
- Message 자원의 핸들링
- 이벤트 발생
- `WebApplicationContext`와 같은 Application 계층의 특정 문맥
  **line**
  다시 말 해서 `BeanFactory`는 기본적인 기능의 설정을 지원하고, `ApplicationContext`는 더 기업에 특화된 기능을 제공한다.
  `ApplicationContext`는 `BeanFactory`의 슈퍼세트이며 이번 장에서 독점적으로 설명이 된다. `BeanFactory`에 대한 설명을 더 듣고싶다면 `ApplicationContext`대신에 `BeanFactory` 챕터를 들어야 한다.
  **line**
  스프링에서 Application의 Backbone을 유지하는 객체와 IoC 컨테이너에 의해 관리되는 객체는 모두 Bean이라고 불린다.
  Bean은 인스턴스화 되며 조립되며 IOC 컨테이너에 관리되는 객체이다.
  하지만 Bean은 단순히 당신의 어플리케이션들 중에 하나이다. Bean과 그들 사이의 의존성은 컨테이너에서 사용하는 구성 메타 데이터에 반영된다.

## Container Overview

`org.springframework.context.ApplicationContext` 인터페이스는 IoC컨테이너를 대표하고 **인스턴스화, 설정, Bean의 assembling**에 대한 책임이 있다. 컨테이너는 설정 메타 데이터를 읽으므로써 어떤 객체가 인스턴스화 되어야 하며, 설정되고 조립되는지 정보를 획득한다. 메타 데이터의 설정은 XML, 어노테이션, Java Code로 대표횐다. 이것은 당신에게 당신의 어플리케이션으로 구성된 객체를 표현하고 이러한 객체들 사이의 의존성을 풍부하게 한다.
**line**
몇몇의 `ApplicationContext` 인터페이스의 implementations이 spring과 함께 지원된다. 단독 어플리케이션에서 `ClassPathXmlApplicationContext`나 `FileSystemXmlAPplicationContext`의 인스턴스는 흔히 생성된다. XML이 구성 메타 데이터를 정의하는 전통적인 형식 이었지만, 이러한 추가 메타 데이터 형식에 대한 지원을 선언적으로 활성화하기 위해 소량의 XML 구성을 제공하여 메타 데이터 형식으로 Java 주석 또는 코드를 사용하도록 컨테이너에 지시 할 수 있다.

**liine**

대부분의 애플리케이션 시나리오에서 Spring IoC 컨테이너의 인스턴스를 하나 이상 인스턴스화하는 데 명시적인 사용자 코드가 필요하지 않다. 예를 들어, 웹 응용 프로그램 시나리오에서 응용 프로그램의 `web.xml` 파일에있는 간단한 8 줄 (또는 그 이상)의 상용구 웹 설명자 XML이면 충분하다 (웹 응용 프로그램을위한 편리한 ApplicationContext 인스턴스화 참조). Eclipse 용 Spring Tools (Eclipse 기반 개발 환경)를 사용하는 경우 몇 번의 마우스 클릭이나 키 입력만으로이 상용구 구성을 쉽게 만들 수 있다.

**line**

아래의 다이어그램은 Spring이 어떻게 동작하는지 잘 보여준다. 애플리케이션 클래스는 구성 메타 데이터와 결합되어 `ApplicationContext`가 생성되고 초기화 된 후 완전히 구성되고 실행 가능한 시스템 또는 애플리케이션을 갖게된다.
**사진**

## Configuration Metadata

다이어그램에서 보여주듯, Spring IoC 컨테이너는 설정 메타 데이터를 사용한다. 이 설정 메타데이터는 너가 어떻게 어플리케이션을 개발하는지 알려준다. 그럼 Spring 컨테이너은 그 정보를 가지고 인스턴스화 하고, 설정하고 객체를 조립하여 어플리케이션을 동작하게 한다.

**줄**

구성 메타 데이터는 전통적으로 간단하고 직관적 인 XML 형식으로 제공되며,이 장의 대부분은 Spring IoC 컨테이너의 주요 개념과 기능을 전달하는 데 사용한다.

> XML 기반 메타 데이터는 유일하게 허용되는 구성 메타 데이터 형식이 아니다. Spring IoC 컨테이너 자체는이 구성 메타 데이터가 실제로 작성되는 형식에서 완전히 분리된다. 요즘 많은 개발자들이 Spring 애플리케이션을 위해 Java 기반 구성을 선택한다.

## Using the Container

`ApplicationContext`는 서로다른 Bean과 의존성을 등록하고 유지할 수 있는 진화된 Factory이다. `T getBean(String name, Class<T> requiredType)` 메서드를 사용함으로써, 당신은 당신의 Bean 인스턴스를 회수할 수 있다.

`ApplicationContext`은 당신이 빈의 정의를 읽고 그들에게 접근할 수 있도록 한다.

그런 다음 `getBean`을 사용하여 Bean의 인스턴스를 검색 할 수 있다. `ApplicationContext` 인터페이스에는 Bean을 검색하기위한 몇 가지 다른 메소드가 있지만 이상적으로는 애플리케이션 코드에서이를 사용하지 않아야한다
실제로 애플리케이션 코드는 `getBean()` 메소드에 대한 호출이 전혀 없어야하며 따라서 Spring API에 전혀 의존하지 않아야한다.
예를 들어 Spring과 웹 프레임 워크의 통합은 컨트롤러 및 JSF 관리 빈과 같은 다양한 웹 프레임 워크 구성 요소에 대한 종속성 주입을 제공하여 메타 데이터 (예 : 자동 연결 주석)를 통해 특정 빈에 대한 종속성을 선언 할 수 있다.
