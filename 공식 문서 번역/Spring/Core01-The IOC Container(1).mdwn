##### 해당 포스팅은 [Spring의 공식 문서](https://spring.io/projects/spring-framework)를 번역한 포스팅입니다. 공식 문서를 학습하실 때 참고하는 용도로 제작되었습니다. 모든 글의 출처는 Spring이며 공식 문서와 다른 의미로해석 되어 있는 부분이 있을 수 있으니 양해바랍니다.

---

# IOC Container

## IOC 컨테이너와 Bean에 대한 소개

이번에는 제어의 역전에 대한 Spring 프레임워크 원리를 설명하겠다.
IOC는 DI(Dependency Injection)으로도 잘 알려져 있다. 객체가 생성자, 팩토리 메서드에 대한 인수 또는 팩토리 메서드에서 생성되거나 반환 된 후 개체 인스턴스에 설정된 속성을 통해서만 개체가 종속성 (즉, 작업하는 다른 개체)을 정의하는 프로세스이다.
컨테이너는 Bean을 생성할 때 의존성들을 주입한다. 이 프로세스는 기본적으로 클래스 또는 Service Locator 패턴과 같은 메커니즘을 사용하여 종속성의 인스턴스화 또는 위치를 제어하는 Bean 자체의 역 (이름, Inversion of Control)이다.
`org.springframework.beans`와 `org.springframework.context` 패키지는 스프링의 IOC 컨테이너에 기반한다. `BeanFactory` 인터페이스는 어떠한 타입이더라도 제어를 할 수 있는 더 확장된 설정 메커니즘을 제공한다. `ApplicationContext`는 `BeanFactory`의 하위 인터페이스이다. 그리고 다음을 포함한다.
**line**

- Spring의 AOP적 특성의 쉬운 통합
- Message 자원의 핸들링
- 이벤트 발생
- `WebApplicationContext`와 같은 Application 계층의 특정 문맥
  **line**
  다시 말 해서 `BeanFactory`는 기본적인 기능의 설정을 지원하고, `ApplicationContext`는 더 기업에 특화된 기능을 제공한다.
  `ApplicationContext`는 `BeanFactory`의 슈퍼세트이며 이번 장에서 독점적으로 설명이 된다. `BeanFactory`에 대한 설명을 더 듣고싶다면 `ApplicationContext`대신에 `BeanFactory` 챕터를 들어야 한다.
  **line**
  스프링에서 Application의 Backbone을 유지하는 객체와 IoC 컨테이너에 의해 관리되는 객체는 모두 Bean이라고 불린다.
  Bean은 인스턴스화 되며 조립되며 IOC 컨테이너에 관리되는 객체이다.
  하지만 Bean은 단순히 당신의 어플리케이션들 중에 하나이다. Bean과 그들 사이의 의존성은 컨테이너에서 사용하는 구성 메타 데이터에 반영된다.

## Container Overview

`org.springframework.context.ApplicationContext` 인터페이스는 IoC컨테이너를 대표하고 **인스턴스화, 설정, Bean의 assembling**에 대한 책임이 있다. 컨테이너는 설정 메타 데이터를 읽으므로써 어떤 객체가 인스턴스화 되어야 하며, 설정되고 조립되는지 정보를 획득한다. 메타 데이터의 설정은 XML, 어노테이션, Java Code로 대표횐다. 이것은 당신에게 당신의 어플리케이션으로 구성된 객체를 표현하고 이러한 객체들 사이의 의존성을 풍부하게 한다.
**line**
