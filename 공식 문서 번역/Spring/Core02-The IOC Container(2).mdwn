##### 해당 포스팅은 [Spring의 공식 문서](spring.io)를 번역한 포스팅입니다. 공식 문서를 학습하실 때 참고하는 용도로 제작되었습니다. 모든 글의 출처는 spring이며 공식 문서와 다른 의미로해석 되어 있는 부분이 있을 수 있으니 양해바랍니다.

---

# Bean Overview

스프링의 IOC 컨테이너는 하나 또는 그 이상의 Bean을 관리한다. 이러한 Bean들은 XML에 `<bean/>` 과 같은 정의를 한 컨테이너 메타 데이터 설정과 함께 생성된다.
컨테이너 내부에서 이러한 Bean 정의는 `BeanDefinition` 객체로 대표될 수 있고 다음과 같은 메타 데이터를 포함한다.

- Package를 만족하는 클래스 네임 : bean으로 정의된 클래스의 실제 구현체
- Bean이 컨테이너에서 작동해야하는 방식을 나타내는 Bean 작동 구성 요소 (범위, 라이프 사이클 콜백 등).
- Bean이 작업을 수행하는 데 필요한 다른 Bean에 대한 참조이다. 이러한 참조를 공동 작업자 또는 종속성이라고한다.
- 새로 생성 된 객체에서 설정할 기타 구성 설정 — 풀의 크기 제한 또는 연결 풀을 관리하는 Bean에서 사용할 연결 수.

이 메타 데이터는 각 빈 정의를 구성하는 속성 집합으로 변환된다. 다음 표는 이러한 속성을 설명한다.

특정 빈을 만드는 방법에 대한 정보를 포함하는 빈 정의 외에도 ApplicationContext 구현은 컨테이너 외부 (사용자에 의해) 생성 된 기존 개체의 등록을 허용한다.
이는 `BeanFactory` `DefaultListableBeanFactory` 구현을 리턴하는 `getBeanFactory()` 메소드를 통해 `ApplicationContext`의 `BeanFactory`에 액세스하여 수행된다. `DefaultListableBeanFactory`는 `registerSingleton(..)` 및 `registerBeanDefinition (..)` 메소드를 통해이 등록을 지원한다. 그러나 일반적인 애플리케이션은 정규 빈 정의 메타 데이터를 통해 정의 된 빈에서만 작동한다.

## Naming Beans

모든 빈은 하나 또는 이상의 식별자를 갖는다. 이러한 식별자는 Bean을 호스트 하는 컨테이너 내에서 유일해야한다. Bean은 대부분
